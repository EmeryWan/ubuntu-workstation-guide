import{_ as s,M as o,p as t,q as d,R as e,t as a,N as i,a1 as n}from"./framework-96b046e1.js";const c="/ubuntu-workstation-guide/images/docs/guide/base/directory/directory.png",p="/ubuntu-workstation-guide/images/docs/guide/base/directory/root.png",u="/ubuntu-workstation-guide/images/docs/guide/base/directory/bin.png",h="/ubuntu-workstation-guide/images/docs/guide/base/directory/boot.png",l="/ubuntu-workstation-guide/images/docs/guide/base/directory/dev.png",b="/ubuntu-workstation-guide/images/docs/guide/base/directory/etc.png",g="/ubuntu-workstation-guide/images/docs/guide/base/directory/home.png",m="/ubuntu-workstation-guide/images/docs/guide/base/directory/lib.png",_="/ubuntu-workstation-guide/images/docs/guide/base/directory/opt.png",x="/ubuntu-workstation-guide/images/docs/guide/base/directory/procversion.png",f="/ubuntu-workstation-guide/images/docs/guide/base/directory/procps.png",v="/ubuntu-workstation-guide/images/docs/guide/base/directory/proccat.png",y="/ubuntu-workstation-guide/images/docs/guide/base/directory/proc1929.png",k="/ubuntu-workstation-guide/images/docs/guide/base/directory/sbin.png",w="/ubuntu-workstation-guide/images/docs/guide/base/directory/tmp.png",L="/ubuntu-workstation-guide/images/docs/guide/base/directory/usr.png",S="/ubuntu-workstation-guide/images/docs/guide/base/directory/usrbin.png",U="/ubuntu-workstation-guide/images/docs/guide/base/directory/usrlocal.png",E="/ubuntu-workstation-guide/images/docs/guide/base/directory/var.png",F={},I=n(`<div class="language-text" data-ext="text"><pre class="language-text"><code> ________________
&lt; 目录结构介绍 &gt;
 ----------------
        \\   ^__^
         \\  (�)\\_______
            (__)\\       )\\/\\
                ||----w |
                ||     ||
</code></pre></div><h1 id="linux-目录结构介绍" tabindex="-1"><a class="header-anchor" href="#linux-目录结构介绍" aria-hidden="true">#</a> Linux 目录结构介绍</h1><p>Linux 是一个开源的系统，使得 Linux 发行版本有很多，利用 Linux 开发产品的团队也有很多，如果任由每个人都按照自己的想法来配置 Linux 系统文件目录，后期可能会产生诸多的管理问题。</p><p>为了避免诸多使用者对 Linux 系统目录结构天马行空，Linux 基金会发布了 FHS 标准。多数 Linux 发行版系统都遵循这一标准。</p><blockquote><p>FHS（Filesystem Hierarchy Standard），文件系统层次化标准，该标准规定了 Linux 系统中所有一级目录以及部分二级目录（/usr 和 /var）的用途。发布此标准的主要目的就是为了让用户清楚地了解每个目录应该存放什么类型的文件。</p></blockquote><p>几乎所有的 Linux 发行版都包含以下的目录结构：</p><p><img src="`+c+'" alt="directory"></p><p>不同的发行版可能会添加一下独有的目录，例如 Ubuntu 中包含 <code>/snap</code> 来放置 snap 应用。</p><p><img src="'+p+'" alt="root"></p><h2 id="bin" tabindex="-1"><a class="header-anchor" href="#bin" aria-hidden="true">#</a> /bin</h2><p>Binary</p><p>二进制可执行文件和可执行文件的快捷方式（软链接），存放着常用的命令。</p><p>例如常用的 <code>ls</code> <code>cp</code> <code>cd</code> 等命令都存放在这里。</p><p><img src="'+u+'" alt="bin"></p><h2 id="boot" tabindex="-1"><a class="header-anchor" href="#boot" aria-hidden="true">#</a> /boot</h2><p>启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p><img src="'+h+'" alt="boot"></p><p>如果是以 UEFI 方式安装的系统，其中 <code>efi</code> 文件夹中的为 <code>EFI</code> 分区中的引导。</p><h2 id="dev" tabindex="-1"><a class="header-anchor" href="#dev" aria-hidden="true">#</a> /dev</h2><p>Device</p><p>存放着所有的设备文件。在 Linux 中，所有东西都是以文件的形式存在的，包括硬件设备。</p><p><img src="'+l+'" alt="dev"></p><h2 id="etc" tabindex="-1"><a class="header-anchor" href="#etc" aria-hidden="true">#</a> /etc</h2><p>Etcetera</p><p>存放程序的配置信息，大多数安装的应用配置信息都会在这里。</p><p>例如：</p><ul><li><code>/etc/apt</code> apt 源配置目录</li><li><code>/ect/vim</code> vim 配置目录</li><li><code>/etc/nginx</code> nginx 配置目录</li><li><code>/ect/redis</code> redis 配置目录</li></ul><p><img src="'+b+'" alt="etc"></p><h2 id="home" tabindex="-1"><a class="header-anchor" href="#home" aria-hidden="true">#</a> /home</h2><p>用户的主目录。</p><p>在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名。</p><p><img src="'+g+'" alt="home"></p><h2 id="lib" tabindex="-1"><a class="header-anchor" href="#lib" aria-hidden="true">#</a> /lib</h2><p>Library</p><p>系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。</p><p>几乎所有的应用程序都需要用到这些共享库。包含 bin 和 sbin 中可执行文件的依赖。</p><p><img src="'+m+`" alt="lib"></p><h2 id="media" tabindex="-1"><a class="header-anchor" href="#media" aria-hidden="true">#</a> /media</h2><p>自动挂载的设备，比如 U 盘，移动硬盘，网络设备等的目录。</p><p>比如现在有一个 U 盘，插到电脑上之后，系统会把 U 盘自动挂载到 <code>/media/$USER</code> 文件夹中。</p><h2 id="mnt" tabindex="-1"><a class="header-anchor" href="#mnt" aria-hidden="true">#</a> /mnt</h2><p>提供给用户临时手动挂载设备文件夹，一般是空文件夹。</p><p>比如现在要手动挂载一个硬盘，可用如下挂载到 <code>/mnt</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mount</span> /dev/sdb1 /mnt/disk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="opt" tabindex="-1"><a class="header-anchor" href="#opt" aria-hidden="true">#</a> /opt</h2><p>Optional</p><p>一些第三方软件安装的目录。</p><p>比如 Chrome 浏览器，WPS 等软件，都会安装在这里。</p><p><img src="`+_+'" alt="opt"></p><h2 id="root" tabindex="-1"><a class="header-anchor" href="#root" aria-hidden="true">#</a> /root</h2><p>这是 root 用户的家目录。</p><h2 id="proc" tabindex="-1"><a class="header-anchor" href="#proc" aria-hidden="true">#</a> /proc</h2><p>Processes</p><p><code>/proc</code> 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p><p><img src="'+x+'" alt="procversion"></p><p><code>/proc</code> 里面有一大堆数字命名的文件夹，这个数字其实是 Process ID（PID），对应着运行的服务。</p><p><img src="'+f+'" alt="procps"></p><p><img src="'+v+'" alt="proccat"></p><p><img src="'+y+'" alt="proc1929"></p><h2 id="sbin" tabindex="-1"><a class="header-anchor" href="#sbin" aria-hidden="true">#</a> /sbin</h2><p>Superuser Binaries</p><p>这里存放的是系统管理员使用的系统管理程序。</p><p>例如常见的 <code>groupadd</code> <code>groupdel</code>。</p><p><img src="'+k+'" alt="sbin"></p><h2 id="srv" tabindex="-1"><a class="header-anchor" href="#srv" aria-hidden="true">#</a> /srv</h2><p>Service</p><p>主要用来存放服务数据。对于桌面版 Linux 系统，这个文件夹一般是空的，但是对于 Linux 服务器，Web 服务或者 FTP 文件服务的资源可以存放在这里。</p><h2 id="tmp" tabindex="-1"><a class="header-anchor" href="#tmp" aria-hidden="true">#</a> /tmp</h2><p>Temporary</p><p>存储一些程序的临时文件。</p><p>临时文件可能起到很重要的作用。比如有时候 Word 文档崩溃了，好不容易写的东西全没了，Linux 的很多文本编辑器都会在 <code>/tmp</code> 放一份当前文本的 copy 作为临时文件，如果你的编辑器意外崩溃，有机会在 <code>/tmp</code> 找一找临时文件抢救一下。</p><p><img src="'+w+'" alt="tmp"></p><h2 id="usr" tabindex="-1"><a class="header-anchor" href="#usr" aria-hidden="true">#</a> /usr</h2><p>Unix Shared Resources</p><p>共享资源，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p><p><img src="'+L+'" alt="usr"></p><h3 id="usr-bin-usr-sbin" tabindex="-1"><a class="header-anchor" href="#usr-bin-usr-sbin" aria-hidden="true">#</a> /usr/bin /usr/sbin</h3><p>系统用户 / 超级管理员 使用的应用程序。</p><p>在 Ubuntu 中，<code>/bin</code> <code>/sbin</code> 其实就是 <code>/usr/bin</code> <code>/usr/sbin</code> 的一个链接。</p><p><img src="'+S+'" alt="usrbin"></p><h3 id="usr-src" tabindex="-1"><a class="header-anchor" href="#usr-src" aria-hidden="true">#</a> /usr/src</h3><p>内核源代码默认的放置目录。</p><h3 id="usr-lib" tabindex="-1"><a class="header-anchor" href="#usr-lib" aria-hidden="true">#</a> /usr/lib</h3><p>包含所有那些用户不能直接执行的库文件。包含着所有 &#39;/usr/bin&#39; 和 &#39;/usr/sbin&#39; 目录中可执行命令程序需调用的二进制库文件。</p><p>例如使用 <code>apt</code> 安装 openjdk 的目录在 <code>/usr/lib/jvm</code>。</p><h3 id="usr-share" tabindex="-1"><a class="header-anchor" href="#usr-share" aria-hidden="true">#</a> /usr/share</h3><p>包含独立于架构的共享数据。</p><p>例如系统桌面图标目录 <code>/user/share/applications</code>。</p><h3 id="usr-local" tabindex="-1"><a class="header-anchor" href="#usr-local" aria-hidden="true">#</a> /usr/local</h3><p>用于本地安装软件的目标目录。从源代码安装的用户程序都将安装到这里。</p><p><img src="'+U+'" alt="usrlocal"></p><h2 id="var" tabindex="-1"><a class="header-anchor" href="#var" aria-hidden="true">#</a> /var</h2><p>Variable</p><p>存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。</p><p>例如日志文件。</p><p><img src="'+E+'" alt="var"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',97),B={href:"https://segmentfault.com/a/1190000038497705",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.runoob.com/linux/linux-system-contents.html",target:"_blank",rel:"noopener noreferrer"};function P(V,D){const r=o("ExternalLinkIcon");return t(),d("div",null,[I,e("ul",null,[e("li",null,[e("a",B,[a("https://segmentfault.com/a/1190000038497705"),i(r)])]),e("li",null,[e("a",N,[a("https://www.runoob.com/linux/linux-system-contents.html"),i(r)])])])])}const q=s(F,[["render",P],["__file","directory.html.vue"]]);export{q as default};
