import{_ as s,p as i,q as r,Q as a,a1 as d,R as e,t as n}from"./framework-96b046e1.js";const c={},o=d(`<div class="language-text" data-ext="text"><pre class="language-text"><code> ___________________
&lt; Linux 常用命令 &gt;
 -------------------
        \\   ^__^
         \\  (�)\\_______
            (__)\\       )\\/\\
                ||----w |
                ||     ||
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>本页内容主要来自于：https://dl.ypw.io/linux-command/</p></div><h1 id="linux-常用命令" tabindex="-1"><a class="header-anchor" href="#linux-常用命令" aria-hidden="true">#</a> Linux 常用命令</h1><p>这里介绍了最常用的 Linux 命令，有一些在工作中是不可或缺的，还有一些能够极大的提高效率。想要熟练地使用多加练习即可！</p><h3 id="man" tabindex="-1"><a class="header-anchor" href="#man" aria-hidden="true">#</a> man</h3><p>Linux 下的帮助命令。</p><p>授人以鱼不如授人以渔，首先应该教会大家查文档，而不是教会大家所有命令的用法。</p><p>如：<code>man ls</code>可以查看 ls 命令的帮助文档。</p><p>提示：按 q 退出帮助页面。</p>`,9),h=d(`<h2 id="文件查看" tabindex="-1"><a class="header-anchor" href="#文件查看" aria-hidden="true">#</a> 文件查看</h2><h3 id="cd" tabindex="-1"><a class="header-anchor" href="#cd" aria-hidden="true">#</a> cd</h3><p>切换工作目录。</p><p><code>~</code> 是 home directory 的意思，<code>.</code>表示目前所在的目录，<code>..</code>表示目前目录位置的上一层目录。</p><p><code>cd ..</code> 返回上一层目录。</p><h3 id="ls" tabindex="-1"><a class="header-anchor" href="#ls" aria-hidden="true">#</a> ls</h3><p><code>ls</code> 是 list 的缩写，用来显示目标列表。</p><p><code>ll</code> 是<code>ls -lh</code> 的别名，列出的信息更加详细。</p><h3 id="pwd" tabindex="-1"><a class="header-anchor" href="#pwd" aria-hidden="true">#</a> pwd</h3><p><code>pwd</code> 命令以绝对路径的方式显示用户当前工作目录。</p><h3 id="cat" tabindex="-1"><a class="header-anchor" href="#cat" aria-hidden="true">#</a> cat</h3><p>显示文件的内容：<code>cat file</code></p><p>当文件较大时，文本会在屏幕上快速滚动，可以使用<code>Ctrl+S</code>停止滚动，<code>Ctrl+Q</code>恢复滚动，<code>Ctrl+C</code>退出当前命令。</p><h3 id="head" tabindex="-1"><a class="header-anchor" href="#head" aria-hidden="true">#</a> head</h3><p>显示文件开头的内容，比如：<code>head -n 5 train.csv</code> 可以显示训练集 csv 前五行内容。</p><h3 id="tail" tabindex="-1"><a class="header-anchor" href="#tail" aria-hidden="true">#</a> tail</h3><p>显示文件尾部的内容。<code>tail</code> 和 <code>head</code> 默认显示 10 行。</p><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h3><p>在指定目录下查找文件。</p><h3 id="grep" tabindex="-1"><a class="header-anchor" href="#grep" aria-hidden="true">#</a> grep</h3><p>筛选命令，比如我想查找许多文件里面的 markdown 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-lh</span> <span class="token operator">|</span> <span class="token function">grep</span> .md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>➜  pytorch git:(ff608a9) ✗ ls -lh | grep .md
-rw-rw-r--  1 ypw ypw  15K 12月  5  2018 CONTRIBUTING.md
-rw-rw-r--  1 ypw ypw  285 12月  4  2018 mypy-README.md
-rw-rw-r--  1 ypw ypw  14K 12月  5  2018 README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="whereis" tabindex="-1"><a class="header-anchor" href="#whereis" aria-hidden="true">#</a> whereis</h3><p>可以查找包含指定关键字的文件，如 <code>whereis python</code> 可以查找所有的文件名包含 python 的文件路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>➜  ~ whereis python
python: /usr/bin/python2.7 /usr/bin/python3.5 /usr/bin/python /usr/bin/python3.5m /usr/lib/python2.7 /usr/lib/python3.5 /etc/python2.7 /etc/python3.5 /etc/python /usr/local/lib/python2.7 /usr/local/lib/python3.5 /usr/include/python3.5m /usr/share/python /home/ypw/anaconda3/bin/python3.6 /home/ypw/anaconda3/bin/python3.6m-config /home/ypw/anaconda3/bin/python3.6-config /home/ypw/anaconda3/bin/python3.6m /home/ypw/anaconda3/bin/python /usr/share/man/man1/python.1.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="which" tabindex="-1"><a class="header-anchor" href="#which" aria-hidden="true">#</a> which</h3><p>可以查找当前使用的命令的绝对路径。</p><p>如 <code>which python</code> 可以显示 <code>/home/ypw/anaconda3/bin/python</code>。</p><p>但是当你激活一个新的环境以后，就会得到不一样的结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token builtin class-name">source</span> activate tensorflow
<span class="token punctuation">(</span>tensorflow<span class="token punctuation">)</span> ➜  ~ <span class="token function">which</span> python
/home/ypw/anaconda3/envs/tensorflow/bin/python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="locate" tabindex="-1"><a class="header-anchor" href="#locate" aria-hidden="true">#</a> locate</h3><p>locate 命令会寻找包含关键字的所有文件路径。</p><h2 id="文件读写" tabindex="-1"><a class="header-anchor" href="#文件读写" aria-hidden="true">#</a> 文件读写</h2><h3 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir" aria-hidden="true">#</a> mkdir</h3><p>创建文件夹。</p><h3 id="touch" tabindex="-1"><a class="header-anchor" href="#touch" aria-hidden="true">#</a> touch</h3><p>创建空文件。</p><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm" aria-hidden="true">#</a> rm</h3><p>移除文件。移除文件夹时需要使用<code>rm -r</code>，没有权限时需要<code>rm -rf</code> 。</p><p>此命令比较危险，注意不要写成这样：<code>rm -rf / tmp</code>，这样会删除<code>/</code>下的所有文件，属于删库跑路行为。</p><h3 id="cp" tabindex="-1"><a class="header-anchor" href="#cp" aria-hidden="true">#</a> cp</h3><p>复制文件：<code>cp src dst</code></p><p>复制文件夹：<code>cp -r src dst</code></p><h3 id="mv" tabindex="-1"><a class="header-anchor" href="#mv" aria-hidden="true">#</a> mv</h3><p>移动命令。</p><p>例如：<code>mv source destination</code></p>`,47),t=d(`<h3 id="vim" tabindex="-1"><a class="header-anchor" href="#vim" aria-hidden="true">#</a> vim</h3><p>编辑文件的命令，学习曲线比较陡峭，建议搜索相关教程学习。</p><h3 id="nano" tabindex="-1"><a class="header-anchor" href="#nano" aria-hidden="true">#</a> nano</h3><p>Ubuntu 自带的编辑文件的命令。</p><p>使用方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nano</span> ~/.ssh/authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提示：<code>Ctrl+O</code> 可以保存文件，<code>Ctrl+K</code> 可以删除整行，<code>Ctrl+W</code> 可以查找文本，<code>Ctrl+X</code> 可以退出编辑器，其他特性可以根据底部的快捷键自行学习。</p><h2 id="打包压缩" tabindex="-1"><a class="header-anchor" href="#打包压缩" aria-hidden="true">#</a> 打包压缩</h2><h3 id="zip" tabindex="-1"><a class="header-anchor" href="#zip" aria-hidden="true">#</a> zip</h3><p>压缩命令，通过<code>zip file.zip file</code>可以压缩一个文件，通过<code>zip files.zip -r dir</code>可以压缩整个文件夹。</p><h3 id="unzip" tabindex="-1"><a class="header-anchor" href="#unzip" aria-hidden="true">#</a> unzip</h3><p>解压由<code>zip</code> 命令压缩的 .zip 文件。</p><p>例如：<code>unzip files.zip</code></p><h3 id="tar" tabindex="-1"><a class="header-anchor" href="#tar" aria-hidden="true">#</a> tar</h3><p><code>*.tar</code> 打包文件：只是把很多小文件拼接在一起，速度快，不占用 CPU，比如 ImageNet 数据集就是一个打包文件，解包的速度非常快。打包后的文件大小和原始文件夹的大小基本一致。</p><p><code>*.tar.gz</code> 压缩文件：先打包成一个文件，然后再压缩一遍，就是这个格式。如果文件是未压缩的格式，比如文本文件，使用这个格式可以有很高的压缩比。注意：jpg 和 png 格式是压缩后的格式，只打包就行，如果对 ImageNet 数据集先打包再压缩，就会有很长的耗时，并且文件不会明显变小。</p><ul><li>c：打包</li><li>x：解包</li><li>v：输出详细信息</li><li>f：指定打包文件</li><li>z：使用 gzip 压缩格式</li></ul><p>打包文件夹：<code>tar -cvf files.tar dir</code></p><p>解包：<code>tar -xvf files.tar</code></p><p>压缩文件夹：<code>tar -czvf files.tar.gz dir</code></p><p>解压：<code>tar -xzvf files.tar.gz</code></p><h2 id="权限管理" tabindex="-1"><a class="header-anchor" href="#权限管理" aria-hidden="true">#</a> 权限管理</h2><h3 id="sudo" tabindex="-1"><a class="header-anchor" href="#sudo" aria-hidden="true">#</a> sudo</h3><p>以 root 权限执行命令，比如 <code>sudo reboot</code> 可以重启机器，普通权限无法重启。</p><h3 id="su" tabindex="-1"><a class="header-anchor" href="#su" aria-hidden="true">#</a> su</h3><p>切换用户，比如 <code>sudo su ypw</code> 可以将当前用户切换到 ypw 用户。</p><h3 id="chmod" tabindex="-1"><a class="header-anchor" href="#chmod" aria-hidden="true">#</a> chmod</h3><p>修改权限的命令，比如：<code>sudo chmod -R 777 data</code> 可以把 data 文件夹修改为任何人可以读写。</p><h3 id="chown" tabindex="-1"><a class="header-anchor" href="#chown" aria-hidden="true">#</a> chown</h3><p>修改所有者的命令，比如：<code>sudo chown -R ypw data</code> 可以把 data 文件夹的所有权改为 ypw。</p><h3 id="passwd" tabindex="-1"><a class="header-anchor" href="#passwd" aria-hidden="true">#</a> passwd</h3><p>修改密码命令，直接执行 <code>passwd</code> 可以修改当前用户密码。</p><p>强制修改某个用户的密码：<code>sudo passwd ypw</code></p><h2 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理" aria-hidden="true">#</a> 进程管理</h2><h3 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps</h3><p><code>ps aux</code> 可以列出所有进程的详细信息。</p><p>配合 grep 命令用比较好，比如 <code>ps aux | grep ipython | grep -v grep</code></p><p>首先使用 <code>ps aux</code> 获取所有的进程信息，然后用 <code>grep ipython</code> 查找带有 python 的进程，最后使用 <code>grep -v grep</code> 过滤 grep 进程本身。</p><h3 id="kill" tabindex="-1"><a class="header-anchor" href="#kill" aria-hidden="true">#</a> kill</h3><p>杀掉执行中的进程，刚才 ps 命令可以得到进程号，你可以根据进程号删除该进程，如 <code>kill 8339</code></p>`,40),p=d(`<h3 id="killall" tabindex="-1"><a class="header-anchor" href="#killall" aria-hidden="true">#</a> killall</h3><p>通过进程名来杀掉进程，请确保你不会影响其他人的情况下使用该命令。</p><p>如果同事正在使用 python 跑程序，你也在使用 python 跑程序，在你执行完 <code>killall python</code> 以后，你们的 python 进程都会被杀掉。</p><h2 id="磁盘管理" tabindex="-1"><a class="header-anchor" href="#磁盘管理" aria-hidden="true">#</a> 磁盘管理</h2><h3 id="df" tabindex="-1"><a class="header-anchor" href="#df" aria-hidden="true">#</a> df</h3><p>查看磁盘空间，比如 <code>df -h</code> 可以显示下面的内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Filesystem      Size  Used Avail Use% Mounted on
udev             32G     0   32G   0% /dev
tmpfs           6.3G  9.5M  6.3G   1% /run
/dev/nvme0n1p2  916G  248G  622G  29% /
tmpfs            32G  679M   31G   3% /dev/shm
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs            32G     0   32G   0% /sys/fs/cgroup
/dev/nvme0n1p1  511M  3.5M  508M   1% /boot/efi
tmpfs           6.3G   32K  6.3G   1% /run/user/1000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>df -ih</code> 可以查看 Inodes 使用情况，如果你的磁盘下存在很多小文件，那么你可以使用这个命令查看文件表是否用完了。</p><h3 id="du" tabindex="-1"><a class="header-anchor" href="#du" aria-hidden="true">#</a> du</h3><p>可以查看文件夹大小，比如：<code>du -h ImageNet</code> 可以输出下面的内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>......
163M	ImageNet/train/n12620546
128M	ImageNet/train/n02108551
127M	ImageNet/train/n15075141
140G	ImageNet/train
6.4G	ImageNet/val
146G	ImageNet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mount" tabindex="-1"><a class="header-anchor" href="#mount" aria-hidden="true">#</a> mount</h3><p>挂载磁盘的命令，挂载硬盘：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> ext4 /dev/nvme0n1p1 /data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>挂载 samba 网络盘：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> cifs <span class="token parameter variable">-o</span> <span class="token assign-left variable">username</span><span class="token operator">=</span>ypw,password<span class="token operator">=</span>**** //192.168.8.57/dataset /home/ypw/dataset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：此处需要 <code>sudo apt install cifs-utils</code> 。</p><h2 id="系统管理" tabindex="-1"><a class="header-anchor" href="#系统管理" aria-hidden="true">#</a> 系统管理</h2><h3 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> export</h3><p>设置环境变量命令，一般写在 <code>.bashrc</code> 或 <code>.zshrc</code> 文件中，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/cuda/bin:<span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>的功能是把 <code>/usr/local/cuda/bin</code> 目录添加到 <code>PATH</code> 的最前面，这样就可以直接在命令行使用 <code>/usr/local/cuda/bin</code> 目录下的 <code>nvcc</code> 命令。</p><h3 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> source</h3><p>更新环境变量。</p><p>如 zsh 用户更新了 <code>~/.zshrc</code> 以后，可以使用下面的命令更新环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo</h3><p>可以输出环境变量。</p><p>例如：<code>echo $PATH</code></p><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> service</h3><p>开启关闭服务的命令，如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">service</span> network-manager restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="shutdown" tabindex="-1"><a class="header-anchor" href="#shutdown" aria-hidden="true">#</a> shutdown</h3><p>关机命令。</p><p>例如：<code>sudo shutdown -t 0</code></p><h3 id="reboot" tabindex="-1"><a class="header-anchor" href="#reboot" aria-hidden="true">#</a> reboot</h3><p>重启命令。</p><p>例如：<code>sudo reboot</code></p><h2 id="系统监测" tabindex="-1"><a class="header-anchor" href="#系统监测" aria-hidden="true">#</a> 系统监测</h2><h3 id="uname" tabindex="-1"><a class="header-anchor" href="#uname" aria-hidden="true">#</a> uname</h3><p>显示当前的系统信息。</p><p><code>uname -a</code> 显示全部的信息，如内核版本号、硬件架构、主机名称和操作系统类型等。</p><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top" aria-hidden="true">#</a> top</h3><p>实时查看系统的运行状态，如 CPU、内存、进程的信息。</p><h3 id="ifconfig" tabindex="-1"><a class="header-anchor" href="#ifconfig" aria-hidden="true">#</a> ifconfig</h3><p>这个命令可以查看当前网卡的 ip 地址。如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> inet
          inet addr:192.168.8.100  Bcast:192.168.8.255  Mask:255.255.255.0
          inet6 addr: fe80::211d:78f6:888a:1/64 Scope:Link
          inet addr:127.0.0.1  Mask:255.0.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="free" tabindex="-1"><a class="header-anchor" href="#free" aria-hidden="true">#</a> free</h3><p>查看内存使用情况，如：<code>free -h</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>              total        used        free      shared  buff/cache   available
Mem:            62G        404M         61G        9.4M        891M         61G
Swap:          976M          0B        976M
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络通信" tabindex="-1"><a class="header-anchor" href="#网络通信" aria-hidden="true">#</a> 网络通信</h2><h3 id="ping" tabindex="-1"><a class="header-anchor" href="#ping" aria-hidden="true">#</a> ping</h3><p>测试主机之间网络的连通性。</p><p>例如：<code>ping baidu.com</code></p><h3 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> ssh</h3><p>连接远程服务器：<code>ssh user@192.168.1.100</code></p><p>映射远程端口：<code>ssh -L 本地端口:远程服务器:远程端口 远程服务器</code></p><p>例如：<code>ssh -L 8888:localhost:8888 192.168.1.100</code> 可以把服务器上的 jupyter 监听的 8888 端口映射到本地的 8888 端口，然后只需要在浏览器里输入<code>http://localhost:8888</code> 就可以连接远程服务器的 jupyter 了。</p><h3 id="scp" tabindex="-1"><a class="header-anchor" href="#scp" aria-hidden="true">#</a> scp</h3><p>复制文件/文件夹到远程服务器，或者反向复制，例如：</p><ul><li>从本地复制到远程：<code>scp 本地文件 用户名@目标主机:目标主机路径</code></li><li>从远程复制到本地：<code>scp 用户名@目标主机:目标主机文件 本地地址</code></li></ul><p>复制文件：<code>scp filename user@192.168.1.100:/data</code></p><p>复制文件夹需要添加 -r 参数：<code>scp -r directory user@192.168.1.100:/data</code></p><p>当你复制大量小文件时，请使用<code>rsync</code> 命令。</p><h3 id="rsync" tabindex="-1"><a class="header-anchor" href="#rsync" aria-hidden="true">#</a> rsync</h3><p>同步文件/文件夹命令，带有增量备份功能，速度很快。</p><p>参数：</p><ul><li>-a，--archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。</li><li>-v，--verbose 详细模式输出。</li><li>-z，--compress 在传输时压缩数据，如果你传输的文件没有压缩过，并且带宽不够大，就可以开启压缩。如果你传输的是图像文件，那么压缩会拖慢传输速度。</li><li>--delete，在同步的时候删除多余的文件，这可以确保两个文件夹的一致性。</li><li>--exclude，排除文件，可以使用通配符</li><li>-P，等同于 --partial --progress，显示备份过程。</li></ul><p>同步文件夹：<code>rsync -avP 本地文件夹 用户名@远程服务器:远程地址</code></p>`,69),l=e("h3",{id:"wget",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#wget","aria-hidden":"true"},"#"),n(" wget")],-1),u=e("p",null,"从指定的URL下载文件。",-1),m=e("p",null,[n("下载单个文件："),e("code",null,"wget url")],-1),v=e("p",null,[n("下载并修改文件名："),e("code",null,"wget -O filename.zip url")],-1);function b(f,g){return i(),r("div",null,[o,a(' <script id="asciicast-PFF2O1mkmPFMECrkunYHhjHvs" src="https://asciinema.org/a/PFF2O1mkmPFMECrkunYHhjHvs.js" async><\/script> '),h,a(' <script id="asciicast-hWFuRKiWoggP8xIH7ZKQGmABR" src="https://asciinema.org/a/hWFuRKiWoggP8xIH7ZKQGmABR.js" async><\/script> '),t,a(' <script id="asciicast-LI1QUFDERv148oZZ4qkDOhlIN" src="https://asciinema.org/a/LI1QUFDERv148oZZ4qkDOhlIN.js" async><\/script> '),p,a(' <script id="asciicast-eQjKRxlhu5vOThczbmkcmgbqH" src="https://asciinema.org/a/eQjKRxlhu5vOThczbmkcmgbqH.js" async><\/script> '),l,u,m,v])}const y=s(c,[["render",b],["__file","linux.html.vue"]]);export{y as default};
